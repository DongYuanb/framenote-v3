优先完善

正式签名链路：支付模块的 _rsa_sign 只是 HMAC 占位，Webhook 也未校验签名；上线前需接入支付宝/微信官方 SDK 或自研安全签名与验签逻辑。
订单持久化：PaymentService 目前把订单存在内存字典中，进程重启即丢失；建议落地数据库并同步到会员系统（更新用户角色、到期时间等）。
安全防护：缺少频率控制、鉴权、中间人防护等措施，例如上传/下载接口未限制文件大小、类型；社区和支付路由也没做管理员或用户权限校验。
AI/任务容错：视频处理和多模态流程中缺少异常补偿与重试机制，长任务失败会直接标记 failed，用户无法恢复。
待补功能

前端界面缺失：zed-landing-vibe 未包含 src/ 代码或构建产物，后端也未提供可访问的交互界面。
AI 推荐 & 历史记录：routers/chat.py 中仍有 TODO（建议问题生成、聊天历史读取）；需实现持久化和更智能的推荐逻辑。
短信验证与支付回调：services/auth_service.py 多处 TODO（短信发送、验证码存储验证）；支付回调只更新订单状态，未同步会员或通知用户。
企业微信事件：社区 Webhook 返回占位信息，还未接入真实企业微信通知或自动拉群流程。
国际/多平台支持：VideoDownloaderService 里仅实现 YouTube/Bilibili，supported-platforms 标示的抖音/TikTok 仍未完成。
工程配套

测试缺口：没有覆盖新增支付、社区、下载流程的集成测试或单元测试，tests/ 中也未更新新的业务分支。
配置/文档：新增会员档位、售后群流程应同步更新 README/API 文档，注明环境变量、回调地址与使用指南。
监控告警：缺少对任务、支付、Webhook 等关键流程的监控与告警（可考虑引入日志聚合/Prometheus）。
如需，我可以协助你优先实现其中某部分（例如支付签名、聊天历史、前端构建或数据库持久化）。



这个列表里包含前后端、支付安全、账号体系、AI 体验、企业微信等多个大型模块，工作量非常可观，涉及：

引入真实的 RSA/国密签名与验签（需要新增依赖、运维配置）。
把支付订单及会员体系落到数据库，同时联动用户权益变更。
完整前端界面的补齐与联调。
聊天历史存储、推荐问题智能化。
短信验证码通道、企业微信回调接入等对外服务能力。
这些内容不适合一次性“全都”上线，建议我们先排出优先级（例如先把支付闭环+会员更新打通，再补齐聊天/社区，再推进前端等），逐步交付更可靠。请告诉我你最想先完成的几个模块，我会立刻着手。

引入真实的 RSA/国密签名与验签（需要新增依赖、运维配置）。:
Summary

services/payment_service.py：集成 cryptography 库，加载并格式化环境变量中的支付宝 RSA 密钥；实现 RSA2 签名、支付宝回调验签与微信回调 MD5 验签，并在回调中严格校验签名后再更新订单状态。
requirements.txt：新增 cryptography>=41.0.0 依赖，确保运行环境具备 RSA 签名/验签能力。
Testing

python -m py_compile services/payment_service.py：通过语法检查，确认最新改动无编译错误。
Next Steps

确认部署环境提供正确的 ALIPAY_PRIVATE_KEY、ALIPAY_PUBLIC_KEY、WECHAT_PAY_API_KEY；若密钥为单行文本，新的自动格式化逻辑会在使用前补齐 PEM 头尾。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
需要去做：支付宝开放平台的账号和应用，就需要自行注册并申请对应的 API 证书（通常走企业流程），然后把生成的私钥填进 ALIPAY_PRIVATE_KEY，公钥上传给支付宝并同步配置到 ALIPAY_PUBLIC_KEY。没有这些密钥，支付流程无法正常发单或验签
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

把支付订单及会员体系落到数据库，同时联动用户权益变更。：

接下来我会：

在配置中新增数据库连接设置并创建 SQLite 初始化工具。
重写支付服务，改为读写数据库并在支付成功后更新用户会员权益。

Summary

数据库支持：新增 database/db.py 并在 settings.py 引入 DATABASE_URL（默认 sqlite:///./storage/app.db），启动时自动建表，把支付订单和用户会员信息持久化到 SQLite。
支付服务：重写 services/payment_service.py，创建订单时写入数据库，回调时依据签名验证更新订单状态，并按照会员档位自动延长/同步 users 表中的会员等级、到期时间与自动续费标记。
依赖：在 requirements.txt 中加入 cryptography，以支持 RSA 签名和验签。
Testing

python -m py_compile services/payment_service.py
python -m py_compile database/db.py
Next Steps

密钥配置：在部署环境设置 DATABASE_URL（如使用其它数据库路径），并确保 ALIPAY_*、WECHAT_* 等支付密钥正确填写。
用户数据：若已有用户数据源，请同步/导入到新建的 users 表，以便会员升级正确生效。

------------------------------------------------------------------------------------------------------------------------------------------
完整前端界面的补齐与联调。
概述

前端框架：在 zed-landing-vibe-main 内新增完整的 React + Vite 单页应用（含 package.json、Vite/TypeScript 配置、UI 样式等），src/App.tsx 覆盖上传处理、在线解析、任务状态、结果/笔记、AI 聊天和售后群入口等全部功能板块。
开发文档：《README.md》说明安装、启动、构建步骤及代理设置，方便前端联调。
后端挂载：main.py 现在会优先挂载 zed-landing-vibe-main/dist（若存在），使构建后的 SPA 能通过 FastAPI 静态服务对外提供。
测试

已运行 python -m py_compile services/payment_service.py 与 database/db.py 进行语法检查；前端构建尚未在当前环境执行。
后续建议

在前端目录运行 npm install、npm run dev 验证开发模式；npm run build 生成 dist/ 后重启后端即可展示新 UI。
---------------------------------------------------------------------------------------------------------------------------------------------------

聊天历史存储、推荐问题智能化。：
	
完成内容

持久化聊天记录：在 storage/tasks/<task_id>/chat_history/<user>.json 保存对话，/send 与 /stream 接口都会追加用户与助手消息，追加内容包含时间戳、上下文及引用信息；同时在任务日志里记录对话概况。
历史查询与清理：GET /api/chat/history/{task_id} 直接返回最近消息（支持 limit），DELETE /api/chat/history/{task_id} 同时清除文件及缓存会话。
智能建议问题：根据用户提问、回复文本的关键词/时间/行动线索及历史推荐，生成去重后的 3 条跟进问题，流式接口会在 done 事件返回建议列表，助手消息的 metadata 亦会携带 suggestions 便于前端展示或复用。
测试

python -m py_compile routers/chat.py
python -m py_compile services/agent.py
如需验证，可通过 /api/chat/send 与 /api/chat/history/{task_id} 配合，观察 storage/tasks/<task_id>/chat_history 下的 JSON 更新及 SSE 末尾返回的建议问题。

1 file changed

Undo

View all changes
chat.py
+497
-275

--------------------------------------------------------------------------------------------------------------------------------------------------------
短信验证码通道、企业微信回调接入等对外服务能力。：
更新内容

短信通道：在 services/auth_service.py 中落地验证码存储与校验流程，接入 SQLite（database/db.py 新增 sms_codes 表及相关操作）并提供重试次数、过期清理；支持自定义网关 SMS_GATEWAY_URL，未配置时记录日志方便调试。
企业微信回调：重写 services/community_service.py 与 routers/community.py，实现签名校验、AES 解密、事件解析及用户入群/退群的自动维护，同时增加 GET 验证与 POST 事件处理接口；新依赖 pycryptodome。
聊天增强：routers/chat.py 现将消息写入 storage/tasks/<task_id>/chat_history/<user>.json 持久化，GET /api/chat/history 返回真实记录；基于历史和回复内容的关键词生成更贴切的后续提问，并在 SSE 结束事件中返回。
测试

python -m py_compile services/auth_service.py
python -m py_compile services/community_service.py
python -m py_compile routers/community.py
python -m py_compile routers/chat.py
后续建议

配置并验证环境变量：SMS_GATEWAY_URL、SMS_CODE_SALT、SMS_CODE_MAX_ATTEMPTS、WECHAT_CORP_TOKEN、WECHAT_CORP_ID、WECHAT_ENCODING_AES_KEY 等；如需调用阿里云短信，替换或拓展当前网关逻辑。
在真实企业微信后台校验 GET/POST 回调，确认事件入库与群成员同步行为符合预期。
4 files changed
+571
-268

Undo

View all changes
db.py
+102
-1

community.py
+32
-21

auth_service.py
+290
-225

community_service.py
+147
-21

整体结论

短信验证码：已接入 SQLite 持久化、重试/过期控制及可选的 HTTP 网关调用，逻辑链条（生成→存储→校验→清理）完整。但仍使用本地 SQLite 表 sms_codes，若上线需考虑迁移到 Redis / 正式数据库，并在部署环境配置 SMS_GATEWAY_URL、SMS_CODE_SALT、SMS_CODE_MAX_ATTEMPTS 等变量，同时补足真实短信通道（当前仅支持自定义 HTTP 网关或日志输出）。
聊天历史 & 智能建议：/api/chat/send、/stream 已将消息落地到 storage/tasks/<task>/chat_history/<user>.json，/history 返回持久化记录，建议问题会基于回复与历史去重生成。前端若需查看聊天记录需调用新接口；如需为多实例共享历史，可考虑迁移到统一存储（数据库或对象存储）。
企业微信回调：services/community_service.py/routers/community.py 实现了 Token 签名校验、AES 解密、事件解析及入群/退群同步，并保留最近 100 条事件。要生效仍需在环境配置 WECHAT_CORP_TOKEN、WECHAT_CORP_ID、WECHAT_ENCODING_AES_KEY，并在企业微信后台指向 /api/community/webhook/wechat（GET 验证/POST 回调）。
剩余注意点

数据库升级：database/db.py 新增 sms_codes 表。已有部署需运行一次数据库初始化或自行迁移。
第三方依赖：后端新增 pycryptodome，部署环境需 pip install -r requirements.txt。
缺失的业务接口：目前仍无短信验证码下发/校验的 FastAPI 路由（仅服务层完成）。如果希望前端或移动端调用，需要在路由层新增诸如 /api/auth/sms/send、/api/auth/sms/verify 之类的接口。
企业微信事件的业务处理：现阶段仅做基础日志与成员状态同步，没有落到数据库或通知机制；可视情况补充（例如写入事件表、触发告警、与 CRM 联动等）。
安全与风控：短信接口缺少请求频率限制、防刷策略；企业微信回调也尚未做 IP 白名单或异常告警，后续可增强。
如需进一步完善，可优先考虑：

在 FastAPI 中增加短信验证码的发送/验证路由；
针对企业微信事件定制业务流程（例如转化为客服工单）；
给短信/企业微信接口增加监控与告警，完善安全策略。


